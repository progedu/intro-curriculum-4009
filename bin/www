#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('websocket-study:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var io = require('socket.io')(server);
var os = require('os');
let numberOfCurrentUser = 0;//接続ユーザー数

function emitServerStatus(socket) { //Socket.idとロードアベレージを送信
  socket.emit('server-status', { loadavg: os.loadavg() });
  console.log('TO:' + socket.id + ' server-status event emitted.' + os.loadavg());
}


//ユーザーが接続した時の処理
io.on('connection', function (socket) {
  const timerId = setInterval(emitServerStatus, 1000, socket);//せわしないので1秒にした
  numberOfCurrentUser++; //ユーザー数のカウントを増やす。numberOfCurrentUserはグローバル変数なので全ユーザーで共有
  io.emit('numberOfCurrentUser', numberOfCurrentUser);//人数の変化を全員に送信
  socket.emit('socket_id', socket.id);//IDはアクセスした本人だけに送信
  console.log('connected socket.id:' + socket.id);

  //切断時の処理
  socket.on('disconnect', function () {
    numberOfCurrentUser--; //ユーザー数のカウントを減らす
    io.emit('numberOfCurrentUser', numberOfCurrentUser);//人数の変化を全員に送信
    console.log('disconnected socket.id:' + socket.id);
    clearInterval(timerId);//タイマーを止める
  });

  //チャットメッセージが届いた時の処理
  socket.on('chat_post', function (msg) {
    msg =msg.replace(/<("[^"]*"|'[^']*'|[^'">])*>/g,''); //XSS対策。HTMLタグを除去
    io.emit('chat_broadcast', msg); //届いたメッセージを全員に送信
    console.log('received message', msg);
  });

});